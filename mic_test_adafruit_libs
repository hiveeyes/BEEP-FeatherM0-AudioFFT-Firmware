
/*
  wjmb: testcode for Feather_M0 with ICS43432.
  
 */

#include <Adafruit_ZeroFFT.h> // https://github.com/adafruit/Adafruit_ZeroFFT
#include <Adafruit_ZeroI2S.h> // https://github.com/adafruit/Adafruit_ZeroI2S
#include <math.h>

#define REDLED 13

// 7.19 kHz is the min freq value f_ws. Options: 7500 (14.65), 9375 (18.31), 10000 (19.53), 12500 (24.41), 15000 (29.30), 15625 (30.52), etc. (binwidht if datasize=512)
#define SAMPLE_RATE 12500 // max freq detectable is half of this according to Nyquist
#define DATA_SIZE 1024 // needs to be a multiple of 64.
#define SPECTRUM_SIZE (DATA_SIZE/2) // half of DATA_SIZE.
uint8_t NR_OF_SPECTRA = 8; // nr of freq. spectra to add and get a less discretised spectrum

uint16_t s_SPL = 0; // sound pressure level (dB) ... uncalibrated though.

/* create a buffer for both the left and right channel data */
int32_t left[DATA_SIZE];
int32_t right[DATA_SIZE];

Adafruit_ZeroI2S i2s(0, 1, 9, 2);

void blink(int speed)
{
  digitalWrite(REDLED, HIGH);
  delay(speed);
  digitalWrite(REDLED, LOW);
  delay(speed);
}

void get_audiosample(int32_t *sampledata)
{ 
  //i2s.enableRx();
  for (unsigned i=0; i<DATA_SIZE; ++i) i2s.read(&left[i], &right[i]);
  for (int i = 0; i<DATA_SIZE; i++) 
  {
    left[i] >>= 7;
    right[i] >>= 7;
    // FOR SOME REALLY ODD REASON, DATA COMES IN OCCASIONALLY ON THE LEFT AND OCCASIONALLY ON THE RIGHT CHANNEL. WTF.
    // WORKAROUND! the other channel contains -1 or 0 (not sure why), so adding it gives only as small deviation. 
    sampledata[i] = left[i]+right[i];
  }
  //i2s.disableRx();
}

void setup() 
{
  pinMode(REDLED, OUTPUT);
  delay(10000);
  Serial.begin(115200);
  // start I2S with 32-bits per sample, as needed by SPH0645LM4H-B and ICS43432.
  i2s.begin(I2S_32_BIT, SAMPLE_RATE);
  i2s.enableRx();
}
  
void loop() 
{
  uint16_t spctrm[SPECTRUM_SIZE];
  memset(spctrm,0,sizeof(spctrm));
  uint64_t ss = 0; // sum of squares, 24 bits squared is 48 bits range, so need >32 bits
    
  blink(20);
  
  for (int i=0; i<NR_OF_SPECTRA; i++) 
  {
    int32_t data[DATA_SIZE];
    // sample microphone.
    get_audiosample(data);
    //for (unsigned i=0;i<1000;i++) Serial.println(data[i]);
    // take out the DC component, calculate max ampl, and rms value.
    int32_t mean = 0; // we sum 24 bits oscillating data 2^10 times, so max range is 34 bits. 32 bits is sufficient.
    for (int j=0; j<DATA_SIZE; j++) mean += data[j];
    mean/=DATA_SIZE;
    
    uint32_t mx = 0; // max value
    for (int j=0; j<DATA_SIZE; j++) 
    {
      data[j] -= mean;
      ss += data[j]*data[j]; 
      if (abs(data[j])>mx) mx=abs(data[j]);
    }
    //Serial.print(rms); Serial.print("\t"); Serial.print(mx); Serial.print("\t"); Serial.println(mean);

    // need to fit 24 bits into 16 bits for FFT, so we scale:
    byte shift=0;
    while (mx>((1UL<<15)-1)) 
    {
      shift++;
      mx>>=1;
    }
    int16_t data16[DATA_SIZE];
    for (int j=0; j<DATA_SIZE; j++) data16[j] = data[j]>>shift;
    //for (unsigned i=0;i<1000;i++) { Serial.print(data[i]); Serial.print("\t"); Serial.print(data16[i]); Serial.print("\t"); Serial.println(shift);}
    
    ZeroFFT(data16, DATA_SIZE);
 
    for (int j=0; j<SPECTRUM_SIZE; j++) spctrm[j]+=data16[j]; // potential overflow, I guess, we could devide by NR_OF_SPECTRA.
  }
  for (int j=0; j<500; j++) Serial.println(spctrm[j]);
  uint32_t rms = sqrt(ss/DATA_SIZE);
  const int FULL_SCALE_DBSPL = 120; // FULL SCALE dBSPL (AOP = 116dB SPL)
  const double FULL_SCALE_DBFS = 20*log10(pow(2,23)); // BIT LENGTH = 24 for ICS43432 ... or should this be 23 (half range)
  float s_SPL = FULL_SCALE_DBSPL-(FULL_SCALE_DBFS-20*log10(sqrt(2) * rms));

  blink(20);
}
